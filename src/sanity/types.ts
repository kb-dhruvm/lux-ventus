/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type HostCard = {
  _type: "hostCard";
  selectHost?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "hosts";
  };
};

export type CategoryCard = {
  _type: "categoryCard";
  selectCategory?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "categories";
  }>;
};

export type TopRatedPosts = {
  _type: "topRatedPosts";
  title?: string;
  isManual?: boolean;
  selectPost?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "posts";
  }>;
};

export type NewsLetterCard = {
  _type: "newsLetterCard";
  showNewsLetterCard?: boolean;
};

export type TrandingPost = {
  _type: "trandingPost";
  title?: string;
  isManual?: boolean;
  posts?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "posts";
  };
};

export type FeaturePost = {
  _type: "featurePost";
  featurePost?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "posts";
  };
};

export type SocialLinks = {
  _type: "socialLinks";
  socialMedia?: "facebook" | "instagram" | "twitter" | "linkedin" | "youtube";
  url?: string;
};

export type Posts = {
  _id: string;
  _type: "posts";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  pageLocation?: string;
  title?: string;
  slug?: Slug;
  teaserDescription?: string;
  publishedAt?: string;
  category?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "categories";
  };
  author?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "hosts";
  };
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  alt?: string;
  views?: number;
  ratings?: number;
};

export type Hosts = {
  _id: string;
  _type: "hosts";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  alt?: string;
  description?: string;
  socialLinks?: Array<{
    _key: string;
  } & SocialLinks>;
  hostText?: string;
};

export type Pages = {
  _id: string;
  _type: "pages";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  heroSection?: HeroSection;
  topics?: TopicsSlider;
  body?: Array<{
    _key: string;
  } & FeaturePost | {
    _key: string;
  } & TrandingPost>;
  leftPannel?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "leftPannel";
  };
};

export type LeftPannel = {
  _id: string;
  _type: "leftPannel";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  selectBlcks?: Array<{
    _key: string;
  } & HostCard | {
    _key: string;
  } & NewsLetterCard | {
    _key: string;
  } & TopRatedPosts | {
    _key: string;
  } & CategoryCard>;
};

export type TopicsSlider = {
  _type: "topicsSlider";
  title?: string;
  topics?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "categories";
  }>;
};

export type HeroSection = {
  _type: "heroSection";
  title?: string;
  highlightedText?: string;
  subtitle?: string;
  description?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  alt?: string;
};

export type Header = {
  _id: string;
  _type: "header";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  links?: Array<{
    _key: string;
  } & HeaderLink>;
  button?: HeaderLink;
  enableSearch?: boolean;
};

export type HeaderLink = {
  _type: "headerLink";
  title?: string;
  link?: string;
};

export type Categories = {
  _id: string;
  _type: "categories";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  thumbline?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  alt?: string;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type AllSanitySchemaTypes = SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityFileAsset | Geopoint | HostCard | CategoryCard | TopRatedPosts | NewsLetterCard | TrandingPost | FeaturePost | SocialLinks | Posts | Hosts | Pages | LeftPannel | TopicsSlider | HeroSection | Header | HeaderLink | Categories | SanityImageCrop | SanityImageHotspot | SanityImageAsset | SanityAssetSourceData | SanityImageMetadata | Slug;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./src/queries/layout.query.ts
// Variable: HEADER_QUERY
// Query: *[_type == "header"] | order(_updatedAt desc)[0]
export type HEADER_QUERYResult = {
  _id: string;
  _type: "header";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  links?: Array<{
    _key: string;
  } & HeaderLink>;
  button?: HeaderLink;
  enableSearch?: boolean;
} | null;
// Variable: LEFT_PANEL_QUERY
// Query: *[_type == "leftPanel"] | order(_updatedAt desc)[0]
export type LEFT_PANEL_QUERYResult = null;
// Variable: TOP_RATED_POSTS_QUERY
// Query: *[_type == "posts"] | order(ratings desc)[0...5]{  pageLocation,    title,    image,    alt,    ratings}
export type TOP_RATED_POSTS_QUERYResult = Array<{
  pageLocation: string | null;
  title: string | null;
  image: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  } | null;
  alt: string | null;
  ratings: number | null;
}>;

// Source: ./src/queries/pages.query.ts
// Variable: PAGE_QUERY
// Query: *[_type == "pages" && slug.current == $slug][0]{  title,  heroSection,  topics{    title,    topics[]->  },  leftPannel->{    ...,    selectBlcks[]{      ...,      selectHost->,      selectCategory[]->{        title,        "postCount": count(*[_type == "posts" && references(^._id)])      },      selectPost[]->{            title,    image,    alt,    ratings,        pageLocation      }    }  },  body[]{    ...,    featurePost->  }}
export type PAGE_QUERYResult = {
  title: string | null;
  heroSection: HeroSection | null;
  topics: {
    title: string | null;
    topics: Array<{
      _id: string;
      _type: "categories";
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      title?: string;
      slug?: Slug;
      thumbline?: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: "image";
      };
      alt?: string;
    }> | null;
  } | null;
  leftPannel: {
    _id: string;
    _type: "leftPannel";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    title?: string;
    selectBlcks: Array<{
      _key: string;
      _type: "categoryCard";
      selectCategory: Array<{
        title: string | null;
        postCount: number;
      }> | null;
      selectHost: null;
      selectPost: null;
    } | {
      _key: string;
      _type: "hostCard";
      selectHost: {
        _id: string;
        _type: "hosts";
        _createdAt: string;
        _updatedAt: string;
        _rev: string;
        name?: string;
        image?: {
          asset?: {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
          };
          media?: unknown;
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          _type: "image";
        };
        alt?: string;
        description?: string;
        socialLinks?: Array<{
          _key: string;
        } & SocialLinks>;
        hostText?: string;
      } | null;
      selectCategory: null;
      selectPost: null;
    } | {
      _key: string;
      _type: "newsLetterCard";
      showNewsLetterCard?: boolean;
      selectHost: null;
      selectCategory: null;
      selectPost: null;
    } | {
      _key: string;
      _type: "topRatedPosts";
      title?: string;
      isManual?: boolean;
      selectPost: Array<{
        title: string | null;
        image: {
          asset?: {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
          };
          media?: unknown;
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          _type: "image";
        } | null;
        alt: string | null;
        ratings: number | null;
        pageLocation: string | null;
      }> | null;
      selectHost: null;
      selectCategory: null;
    }> | null;
  } | null;
  body: Array<{
    _key: string;
    _type: "featurePost";
    featurePost: {
      _id: string;
      _type: "posts";
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      pageLocation?: string;
      title?: string;
      slug?: Slug;
      teaserDescription?: string;
      publishedAt?: string;
      category?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "categories";
      };
      author?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "hosts";
      };
      image?: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: "image";
      };
      alt?: string;
      views?: number;
      ratings?: number;
    } | null;
  } | {
    _key: string;
    _type: "trandingPost";
    title?: string;
    isManual?: boolean;
    posts?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "posts";
    };
    featurePost: null;
  }> | null;
} | null;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "*[_type == \"header\"] | order(_updatedAt desc)[0]": HEADER_QUERYResult;
    "*[_type == \"leftPanel\"] | order(_updatedAt desc)[0]": LEFT_PANEL_QUERYResult;
    "*[_type == \"posts\"] | order(ratings desc)[0...5]{\n  pageLocation,\n    title,\n    image,\n    alt,\n    ratings\n}\n": TOP_RATED_POSTS_QUERYResult;
    "*[_type == \"pages\" && slug.current == $slug][0]{\n  title,\n  heroSection,\n  topics{\n    title,\n    topics[]->\n  },\n  leftPannel->{\n    ...,\n    selectBlcks[]{\n      ...,\n      selectHost->,\n      selectCategory[]->{\n        title,\n        \"postCount\": count(*[_type == \"posts\" && references(^._id)])\n      },\n      selectPost[]->{\n            title,\n    image,\n    alt,\n    ratings,\n        pageLocation\n      }\n    }\n  },\n  body[]{\n    ...,\n    featurePost->\n  }\n}": PAGE_QUERYResult;
  }
}
